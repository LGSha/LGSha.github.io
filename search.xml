<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>信息打点（二）</title>
      <link href="/2021/12/13/%E4%BF%A1%E6%81%AF%E6%89%93%E7%82%B9%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2021/12/13/%E4%BF%A1%E6%81%AF%E6%89%93%E7%82%B9%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="1、CMS指纹识别"><a href="#1、CMS指纹识别" class="headerlink" title="1、CMS指纹识别"></a>1、CMS指纹识别</h2><p>​    CMS指纹识别就是判断网站是使用哪种CMS（快速搭建网站的内容管理系统）搭建的，如果能够判断就可以尝试获取源码来进行白盒测试或代码设计，也可以搜索网上关于此CMS所曝出的相关漏洞加以利用。</p><p>​    可以借助在线的CMS指纹识别平台来判断，如：<br>云悉：<a href="https://www.yunsee.cn/">https://www.yunsee.cn/</a><br>WhatWeb：<a href="https://whatweb.net/">https://whatweb.net/</a><br>插件Wappalyzer： <a href="https://www.wappalyzer.com/">https://www.wappalyzer.com</a><br>脚本CMSeek：<a href="https://github.com/Tuhinshubhra/CMSeeK">https://github.com/Tuhinshubhra/CMSeeK</a></p><h2 id="2、源码泄露"><a href="#2、源码泄露" class="headerlink" title="2、源码泄露"></a>2、源码泄露</h2><p>（1）git源码泄露</p><p>​    Git是一个开源的分布式版本控制系统，在执行<code>git init</code>初始化目录的时候，会在当前目录下自动创建一个<code>.git</code>目录，用来记录代码的变更记录等。发布代码的时候，如果没有把<code>.git</code>这个目录删除，就直接发布到了服务器上，攻击者就可以通过它来恢复源代码。</p><p>漏洞利用工具：GitHack</p><p>github项目地址：<a href="https://github.com/lijiejie/GitHack">https://github.com/lijiejie/GitHack</a></p><p>用法示例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GitHack.py http://example/.git/</span><br></pre></td></tr></table></figure><p>（2）svn源码泄露</p><p>​    SVN是一个开放源代码的版本控制系统。在使用SVN管理本地代码过程中，会自动生成一个名为.svn的隐藏文件夹，其中包含重要的源代码信息。网站管理员在发布代码时，没有使用‘导出’功能，而是直接复制代码文件夹到WEB服务器上，这就使.svn隐藏文件夹被暴露于外网环境，可以利用.svn/entries文件，获取到服务器源码。</p><p>漏洞利用工具：<a href="https://github.com/callmefeifei/SvnHack">https://github.com/callmefeifei/SvnHack</a></p><p>（3）网站备份压缩文件</p><p>​    管理员将网站源代码备份在Web目录下，攻击者通过猜解文件路径，下载备份文件，导致源代码泄露。</p><p>常见的备份文件后缀：</p><ul><li>.rar</li><li>.zip</li><li>.7z</li><li>.tar.gz</li><li>.bak</li><li>.txt</li><li>.old</li><li>.temp</li></ul><p>漏洞利用工具：御剑、7kbscan、dirsearch…</p><p>（4）WEB-INF/web.xml泄露</p><p>​    <code>WEB-INF</code>是Java的WEB应用的安全目录，如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。</p><p><code>WEB-INF</code> 主要包含一下文件或目录：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WEB-INF/web.xml : Web应用程序配置文件, 描述了servlet和其他的应用组件配置及命名规则.</span><br><span class="line">WEB-INF/database.properties : 数据库配置文件</span><br><span class="line">WEB-INF/classes/ : 一般用来存放Java类文件(.class)</span><br><span class="line">WEB-INF/lib/ : 用来存放打包好的库(.jar)</span><br><span class="line">WEB-INF/src/ : 用来放源代码(.asp和.php等)</span><br></pre></td></tr></table></figure><p>通过找到 web.xml 文件，推断 class 文件的路径，最后直接 class 文件，再通过反编译 class 文件，得到网站源码。</p><p>（5）DS_Store文件泄露</p><p>​    .DS_Store是Mac下Finder用来保存如何展示 文件/文件夹 的数据文件，每个文件夹下对应一个。如果将.DS_Store上传部署到服务器，可能造成文件目录结构泄漏，特别是备份文件、源代码文件。</p><p>漏洞利用工具：</p><p>github项目地址：<a href="https://github.com/lijiejie/ds_store_exp">https://github.com/lijiejie/ds_store_exp</a></p><p>用法示例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ds_store_exp.py http://example.com/.DS_Store</span><br></pre></td></tr></table></figure><p>​    还有其它的可以参考相关链接：</p><p><a href="https://www.secpulse.com/archives/124398.html">https://www.secpulse.com/archives/124398.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CMS指纹识别 </tag>
            
            <tag> 源码泄露 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息打点（一）</title>
      <link href="/2021/12/13/%E4%BF%A1%E6%81%AF%E6%89%93%E7%82%B9%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2021/12/13/%E4%BF%A1%E6%81%AF%E6%89%93%E7%82%B9%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="1、Web架构"><a href="#1、Web架构" class="headerlink" title="1、Web架构"></a>1、Web架构</h2><p>​    Web架构方面的信息收集主要是包括开发语言、中间件、数据库、操作系统等，每个层面都有可能出现相应的漏洞，只有收集到足够的信息才能加以利用。</p><p>​    开发语言：一般可以从网站的文件后缀来判断。</p><p>​    中间件：一般可以从数据的响应包中获取到相关的信息，或者是使用端口扫描，常见的中间件在运行时会有默认的端口开启，例如Tomcat/8080、Weblogic/7001、Jboss/8080等，还可以根据常见的建站组合来判断，例如Apache+Mysql+php、IIS+Mssql+asp等。</p><p>​    数据库：一般通过端口扫描来判断，常见的数据库端口有Mysql/3306、Mssql/1433、Orcale/1521、Redis/6379等，也可以根据常见的搭配组合来判断。</p><p>​    操作系统：可以通过网站的大小写是否敏感来判断，Windows对大小写不敏感，Linux对大小写敏感，也可以通过ping目标所返回的TTL值来判断，接近64的一般是Linux，接近128的一般是Windows。</p><h2 id="2、Web源码"><a href="#2、Web源码" class="headerlink" title="2、Web源码"></a>2、Web源码</h2><p>​    常见的Web源码主要分为开源的CMS，闭源售卖的，以及内部自主研发的。</p><p>​    在信息收集中，Web源码的获取也是非常关键的，如果能得到目标网站的源码信息，就可以下载到本地进行测试或尝试代码审计。Web源码如果是开源的，就可以直接网上下载获取，如果是闭源或内部的就只能通过泄露安全或资源监控来尝试获取。</p><h2 id="3、Web域名"><a href="#3、Web域名" class="headerlink" title="3、Web域名"></a>3、Web域名</h2><p>​    域名的信息收集主要包括子域名的收集、相似域名、IP反查域名、旁注等。可以借助在线的平台或者各种工具脚本。</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础入门（五）</title>
      <link href="/2021/12/11/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%94%EF%BC%89/"/>
      <url>/2021/12/11/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>​    这节课没有讲什么深入的知识，主要是针对前面网站搭建的一些基础知识点的补充。包括网站资产架构的组成和后期在渗透测试中可能会遇到的阻碍，以及一些番外安全。</p><h2 id="2、知识点概括"><a href="#2、知识点概括" class="headerlink" title="2、知识点概括"></a>2、知识点概括</h2><p>​    由于知识点比较零散，我就把一些比较关键的记录一下吧！偷个懒，嘿嘿：）</p><p>（1）网站架构：我们常见的网站架构可以主要分为IP类站点、目录站点、端口站点、子域名站点。</p><p>（2）站库分离：简单来说，站库分离就是网站和数据库不在同一个服务器上，数据库用的是内网网络，这样的操作模式更快，更安全。很多大型的企业都采用站库分离的模式。如果在后期的渗透测试中碰到了这种情况，就需要针对网站和数据库两个不同入口分别进行渗透。</p><p>（3）CDN：CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在现有网络基础之上的智能虚拟网络，简单来说就是为了解决远距离数据传输访问速度慢的问题，通过在各地部署CDN节点，即缓存服务器，来使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。而在后期渗透测试中，如果目标站点存在CDN的话，我们就需要想办法绕过CDN来获取真实目标主机服务器的信息。</p><p>（4）Waf：Web Application Firewall，即web应用防火墙，一种公认的说法是“web应用防火墙通过执行一系列针对HTTP/HTTPS的安全策略来专门为web应用提供保护的一款产品。它主要可以分为以下4种：</p><p>1、软件型WAF<br>以软件的形式安装在服务器上面，可以接触到服务器上的文件，因此就可以检测服务器上是否有webshell，是否有文件被创建等。</p><p>2、硬件型WAF<br>以硬件形式部署在链路中，支持多种部署方式。当串联到链路上时可以拦截恶意流量，在旁路监听模式时只记录攻击但是不进行拦截。</p><p>3、云 WAF<br>一般以反向代理的形式工作，通过配置后，使对网站的请求数据优先经过WAF主机，在WAF主机对数据进行过滤后再传给服务器。</p><p>4、网站内置的WAF<br>就是来自网站内部的过滤，直接出现在网站代码中，比如说对输入的参数强制类转换啊，对输入的参数进行敏感词检测啊什么的。</p><p>​    在后期的渗透测试过程中，它算是我们路上的最大的拦路虎之一，因此需要针对Waf的绕过进行专门的学习。还是很头疼的呀！555</p><p>（5）负载均衡：负载均衡<em>（Load Balance）</em>其意思就是分摊到多个操作单元上进行执行，例如Web服务器、FTP服务器、企业关键应用服务器和其它关键任务服务器等，从而共同完成工作任务。详情可以参考链接：</p><p><a href="https://zhuanlan.zhihu.com/p/32841479">https://zhuanlan.zhihu.com/p/32841479</a></p><p>（6）主机防火墙：就是运行在我们物理主机自身上的防火墙，针对于单个主机进行防护。例如Windows和Linux都有自带的防火墙，主机防火墙可以阻止未授权用户通过网络访问计算机来保护我们的计算机。</p><p>（7）反向代理：反向代理服务器位于用户与目标服务器之间，但是对于用户而言，反向代理服务器就相当于目标服务器，即用户直接访问反向代理服务器就可以获得目标服务器的资源。同时，用户不需要知道目标服务器的地址，也无须在用户端作任何设定。反向代理服务器通常可用来作为Web加速，即使用反向代理作为Web服务器的前置机来降低网络和服务器的负载，提高访问效率。简而言之就是正向代理的主体为客户端，反向代理的主体为服务器。详细的介绍可以参考链接：</p><p><a href="https://www.zhihu.com/question/24723688">https://www.zhihu.com/question/24723688</a></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资产架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础入门（三）</title>
      <link href="/2021/12/05/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2021/12/05/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="1、抓包工具"><a href="#1、抓包工具" class="headerlink" title="1、抓包工具"></a>1、抓包工具</h2><p>​    Fiddler：是一个http协议调试代理工具，它能够记录并检查所有你的电脑和互联网之间的http通讯，设置断点，查看所有的“进出”Fiddler的数据（指cookie,html,js,css等文件）。 Fiddler 要比其他的网络调试器要更加简单，因为它不仅仅暴露http通讯还提供了一个用户友好的格式。</p><p>​    Charles：是一个HTTP代理服务器,HTTP监视器,反转代理服务器，当浏览器连接Charles的代理访问互联网时，Charles可以监控浏览器发送和接收的所有数据。它允许一个开发者查看所有连接互联网的HTTP通信，这些包括request, response和HTTP headers （包含cookies与caching信息）。</p><p>​    BurpSuite：是用于攻击web 应用程序的集成平台，包含了许多工具。Burp Suite为这些工具设计了许多接口，以加快攻击应用程序的过程。所有工具都共享一个请求，并能处理对应的HTTP 消息、持久性、认证、代理、日志、警报。这也是我们安全测试中最常用的工具之一。</p><p>​    Wireshark：是一个网络封包分析软件。网络封包分析软件的功能是截取网络封包，并尽可能显示出最为详细的网络封包资料。Wireshark使用WinPCAP作为接口，直接与网卡进行数据报文交换。</p><p>​    科来网络分析系统：是一款由科来软件全自主研发，并拥有全部知识产品的网络分析产品。该系统具有行业领先的专家分析技术，通过捕获并分析网络中传输的底层数据包，对网络故障、网络安全以及网络性能进行全面分析，从而快速排查网络中出现或潜在的故障、安全及性能问题。</p><p>​    TCPDump：是可以将网络中传送的数据包完全截获下来提供分析。它支持针对网络层、协议、主机、网络或端口的过滤，并提供and、or、not等逻辑语句来帮助你去掉无用的信息。这款工具主要是针对Linux操作系统。</p><p>​    WPE&amp;封包分析：是强大的网络封包编辑器，wpe可以截取网络上的信息，修改封包数据，是外挂制作的常用工具。一般在安全测试中可用来调试数据通讯地址。</p><p>​    以上介绍到的都是一些常见的抓包工具，在这里，我们需要注意的是它们之间的区别，例如Fiddler、Charles、BurpSuite这三款都是针对Http/Https协议所抓取的数据包，而像Wireshark和科来网络分析系统抓取的是我们整个网卡的数据包。在实际应用中，需要我们学会根据不同对象采用不同抓包封包抓取技术分析。</p><h2 id="2、实验"><a href="#2、实验" class="headerlink" title="2、实验"></a>2、实验</h2><p>​    实验主要是各种抓包工具的操作演示，前期需要配置好相关的环境，主要是安装证书(Https)和模拟器。由于实验比较基础且繁琐，在此就不予展示了。可以参考以下链接：</p><p>Charles</p><p><a href="https://blog.csdn.net/weixin_45459427/article/details/108393878">https://blog.csdn.net/weixin_45459427/article/details/108393878</a></p><p>Fidder</p><p><a href="https://blog.csdn.net/weixin_45043349/article/details/120088449">https://blog.csdn.net/weixin_45043349/article/details/120088449</a></p><p>BurpSuite</p><p><a href="https://blog.csdn.net/qq_36658099/article/details/81487491">https://blog.csdn.net/qq_36658099/article/details/81487491</a></p><p>​    由于在实际应用中，主要是使用BurpSuite这款工具，后期我会在我的另一个博客详细介绍到这款工具的一些使用方法。</p><h2 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h2><p>​    在我们实际的安全测试中，一些目标资产信息往往不能直接和全面的获取，这个时候就需要使用到抓包技术，来帮助我们进行更深入的测试。例如App、小程序、还有一些桌面应用等，在选择抓包工具时我们需要明确测试目标所走的数据协议，也就是说如果碰到有部分应用不走HTTP/S，就需要用到全局协议抓包。</p><p>​    至于封包和抓包的区别主要是零散和整体的区别，封包能精确到每个操作的数据包。</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 抓包技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础入门（四）</title>
      <link href="/2021/12/05/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2021/12/05/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="1、密码存储加密"><a href="#1、密码存储加密" class="headerlink" title="1、密码存储加密"></a>1、密码存储加密</h2><p>MD5 SHA1 NTLM AES DES RC4</p><p>MD5值是32或16位位由数字”0-9”和字母”a-f”所组成的字符串；</p><p>SHA1这种加密的密文特征跟MD5差不多，只不过位数是40；</p><p>NTLM这种加密是Windows的哈希密码，标准通讯安全协议；</p><p>AES,DES,RC4这些都是非对称性加密算法，引入密钥，密文特征与Base64类似；</p><p>应用场景：各类应用密文，自定义算法，代码分析，CTF安全比赛等；</p><h2 id="2、传输数据编码"><a href="#2、传输数据编码" class="headerlink" title="2、传输数据编码"></a>2、传输数据编码</h2><p>BASE64 URL HEX ASCII</p><p>BASE64值是由数字”0-9”和字母”a-f”所组成的字符串,大小写敏感,结尾通常有符号=；</p><p>URL编码是由数字”0-9”和字母”a-f”所组成的字符串,大小写敏感,通常以%数字字母间隔；</p><p>HEX编码是计算机中数据的一种表示方法,将数据进行十六进制转换,它由0-9,A-F,组成；</p><p>ASCII编码是将128个字符进行进制数来表示,常见ASCII码表大小规则：0<del>9&lt;A</del>Z&lt;a~z；</p><h2 id="3、其它"><a href="#3、其它" class="headerlink" title="3、其它"></a>3、其它</h2><p>（1）JS前端代码加密：</p><p>​        JS颜文字  jother  JSFUCK</p><p>​        颜文字特征：一堆颜文字构成的js代码，在F12中可直接解密执行</p><p>​        jother特征：只用! + ( ) [ ] { }这八个字符就能完成对任意字符串的编码。也可在F12中解密执行</p><p>​        JSFUCK特征：与jother很像，只是少了{ }</p><p>（2）后端代码加密：</p><p>​        PHP .NET JAVA</p><p>​        PHP：乱码，头部有信息</p><p>​        .NET：DLL封装代码文件</p><p>​        JAVA：JAR&amp;CLASS文件</p><p>​        举例：Zend ILSpy IDEA</p><p>​        应用场景：版权代码加密，开发特性，CTF比赛等</p><p>（3）数据库密文加密：</p><p>​        MYSQL MSSQL等</p><p>（4）数据显示编码：</p><p>​        UTF-8 GBK2312等</p><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密 </tag>
            
            <tag> 编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础入门（二）</title>
      <link href="/2021/12/03/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2021/12/03/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="1、Web应用环境架构"><a href="#1、Web应用环境架构" class="headerlink" title="1、Web应用环境架构"></a>1、Web应用环境架构</h2><p>​    我们常见的Web应用环境主要是由开发语言，程序源码，中间件容器，数据库，服务器操作系统，第三方软件等组成构建的。</p><p>​    开发语言：也就是指Web应用是使用什么程序语言所编写的，如php、asp、jsp、java、python、ruby，go、html、javascript等。</p><p>​    程序源码：就是由各种开发语言所编写好的程序代码，可根据开发语言分类；应用类型分类；开源CMS分类；开发框架分类等。</p><p>​    中间件容器：简单来说，中间件就是用来支撑Web应用运行的平台，主流的中间件有IIS、Apache、Nginx、Tomcat、Jboss、Weblogic、Glassfish等。</p><p>​    数据库：数据库是用来存储Web应用的各种数据的，常见的数据库有：Access、Mysql、Mssql、Oracle、db2、Sybase、Redis、MongoDB等。</p><p>​    服务器操作系统：主要有Windows系列、Linux系列和Mac系列等。</p><p>​    第三方软件：第三方软件就是管理员根据自己的需求所安装的其他软件，它不是Web应用环境所必需的，比如phpmyadmin、vs-ftpd、VNC、ELK、Openssh等。</p><h2 id="2、Web应用安全漏洞分类"><a href="#2、Web应用安全漏洞分类" class="headerlink" title="2、Web应用安全漏洞分类"></a>2、Web应用安全漏洞分类</h2><p>​    常见的Web安全漏洞包括SQL注入、XSS跨站脚本、RCE执行、CSRF/SSRF/CRLF、反序列化、逻辑越权、XXE、未授权访问、弱口令安全、文件安全（文件上传、文件包含、文件下载/删除）等。</p><p>​    在了解了Web应用的环境架构之后，我们需要对这些Web应用安全漏洞有明确的认识和理解。它们都是产生在程序源码层面的，主要是由于开发人员在编写程序代码时没有严格的规范和过滤所导致的各种漏洞，用一句话来概括就是漏洞函数决定是何种漏洞，可控变量决定漏洞是否可以利用。</p><p>​    所以说，这些漏洞的产生是和中间件、数据库、操作系统都没有关系的。</p><h2 id="3、Web数据包请求响应过程"><a href="#3、Web数据包请求响应过程" class="headerlink" title="3、Web数据包请求响应过程"></a>3、Web数据包请求响应过程</h2><p>​    （1）请求数据包：</p><p>1.请求行：请求类型/请求资源路径、协议的版本和类型</p><p>2.请求头：一些键值对，一般由w3c定义，浏览器与web服务器之间都可以发送，表示特定的某种含义</p><p>3.【空行】请求头与请求体之间用一个空行隔开；</p><p>4.请求体：要发送的数据(一般post方式会使用)；例：userName=123&amp;password=123&amp;code=…</p><p>​    （2）响应数据包：</p><p>1.状态行：协议版本、数字形式的状态代码和状态描述，个元素之间以空格分隔</p><p>2.响应头：包含服务器类型、日期、长度、内容类型等</p><p>3.【空行】响应头与响应体之间用空行隔开</p><p>4.响应正文：程序处理后果，浏览器会将实体内容中的数据取出来，生成相应的页面</p><p>​    其中有一些关键的参数含义我们需要了解，如：Host、User-Agent、Cookie、Referer、Server、Content-Length等。这里就不一一赘述了，可以参考以下链接：</p><p>​    <a href="https://www.cnblogs.com/cherrycui/p/10815465.html">https://www.cnblogs.com/cherrycui/p/10815465.html</a></p><p>​    这里需要介绍到一款本地代理工具，也可以叫抓包工具，Burpsuite。它上面集成了许多的模块，其中Proxy模块是一个拦截HTTP/S的代理服务器，作为一个在浏览器和目标应用程序之间的中间人，允许你拦截，查看，修改在两个方向上的原始数据流。</p><p>​    借助Burpsuite可以帮助我们更直观地了解数据包的请求响应过程。</p><p>​    <img src="/2021/12/03/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89/1.png" alt="1"></p><p>​    <img src="/2021/12/03/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89/2.png" alt="2"></p><p>​    这里还有一个需要了解的知识点就是我们常说的状态码，常见的状态码包括：</p><p>1**：提示信息-表示请求已收到，继续处理</p><p>2**：发送成功（200）</p><p>3**：重定向（302）</p><p>4**：客户端错误</p><p>　　400.发送请求有语法错误</p><p>　　401.访问页面没有授权</p><p>　　403.没有权限访问该页面</p><p>　　404.没有该页面</p><p>5**：服务端错误</p><p>　　500.服务器内部异常</p><p>　　504.服务器请求超时，没有返回结果</p><p>​    在渗透测试的信息收集过程中有一个关键的点就是针对网站文件后台目录的扫描，它的核心原理就是通过判断请求文件地址所返回的状态码来决定的。</p><h2 id="4、实验"><a href="#4、实验" class="headerlink" title="4、实验"></a>4、实验</h2><p>​    本次实验是关于网站的搭建，利用到宝塔的搭建平台来实现，它集成了我们所需的各种开发语言、中间件、数据库和第三方软件，并且可以根据我们的应用需求一键部署。</p><p>​    由于实验内容比较基础，在此就不予展示啦！</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站搭建 </tag>
            
            <tag> Web应用环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础入门（一）</title>
      <link href="/2021/11/30/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2021/11/30/%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="1、名词解释"><a href="#1、名词解释" class="headerlink" title="1、名词解释"></a>1、名词解释</h2><p>​    Poc：简单来说就是漏洞验证代码；</p><p>​    Exp：简单来说就是漏洞利用代码；</p><p>​    Payload：我们俗称的利用载荷，也可以叫利用管道，就是漏洞利用成功后如何给到我们和目标的一种交互或连接方式吧，这里是我自己的理解；</p><p>​    Webshell：也就是我们常说的的网站后门，它是一种以asp，jsp，php等格式文件存在的命令执行环境；</p><p>​    木马：木马就是黑客用来控制目标系统的程序，它会被伪装成一些表面正常的程序来运行，从而实现对目标系统的控制；</p><p>​    病毒：就是能够直接对目标系统造成破坏的程序或代码。</p><p>​    ……</p><p>​    还有很多的专业名词可以参考相关链接：</p><p>​    <a href="https://www.cnblogs.com/sunny11/p/13583083.html">https://www.cnblogs.com/sunny11/p/13583083.html</a></p><h2 id="2、操作系统"><a href="#2、操作系统" class="headerlink" title="2、操作系统"></a>2、操作系统</h2><p>​    操作系统主要分为Windows、Linux和MacOS，根据用途如个人用机、服务器用机又衍生出了各个操作系统的不同版本。如Windows Sever 2008/2012/2016主要是服务器用机，而Windows 7/10则主要是个人用机；Linux的话版本有Centos/Ubuntu/Redhat等，主要是服务器用机；MacOS大多为个人用机。</p><p>​    说到操作系统还涉及到几个关键的知识点需要掌握：</p><p>​    一是我们经常打交道的操作系统命令，Windows的操作系统命令可以通过cmd和powershell窗口来实现；Linux的话大多都是非图像化界面，所以直接通过终端来输入命令执行各种操作。由于命令非常的繁多，我们只需要掌握常用的命令即可，遇到不会的直接网上搜索。可以参考相关链接如下：</p><p>​    <a href="https://blog.csdn.net/weixin_43303273/article/details/83029138">https://blog.csdn.net/weixin_43303273/article/details/83029138</a></p><p>​    二是权限，比如说常见的针对文件目录的读写和执行权限，Windows和Linux分别都是通过对用户和用户组的权限划分来实现的。</p><p>​    三是网络，这里所说的网络是指对内网和外网的理解，内网就是指我们在家庭、学校、公司所使用的这种局域网，外网就是我们所说的公网，即互联网。正常情况下，我们在内网的主机是可以访问外网的服务器，但是外网的主机是不能访问到内网的主机，因为内网的ip地址是私有ip，每个局域网都会存在使用这些ip，所以外网主机就无法准确地寻找到你，它只能到达你的出网口，比如我们的路由器，除非你通过路由器的策略来配置端口转发，这样即可实现互访。只有理解了内网和外网的区别，才能便于我们在后期的渗透测试中更好的理解和分析。</p><p>​    四是防火墙。这里所说的是我们系统自身的防火墙，它主要是用来检测主机外来的数据流量，如果存在恶意的数据流量就会被防火墙直接给阻断。Windows的防火墙在控制面板中的系统和安全中来配置，Linux则是通过Iptables来实现。防火墙的规则主要都是针对外来数据流量的检测，简单来说就是入站检测严格，出站检测宽松。</p><h2 id="3、实验"><a href="#3、实验" class="headerlink" title="3、实验"></a>3、实验</h2><p>​    实验所涉及的知识点是关于反弹shell，由于实验操作比较敏感，在此就不予展示了。需要我们掌握的是什么是正向连接和反向连接，正向连接就是以我们为主体去向目标主机请求数据连接，但是如果目标主机存在有防火墙的话，我们的一些非法请求就会被防火墙给阻断，造成数据无法回显和通讯。这个时候我们就需要考虑反向连接了，让目标服务器来主动连接我们，由于防火墙的规则对出站的数据流量检测宽松，这样我们就可以实现我们对目标主机的一些…嘻嘻。</p><p>​    实验所使用的工具是Netcat,简称nc，安全界叫它瑞士军刀，它是一款简单的Unix工具，使用UDP和TCP协议。它是一个可靠的容易被其他程序所启用的后台操作工具，同时它也被用作网络的测试工具或黑客工具。使用它你可以轻易的建立任何连接。内建有很多实用的工具。</p><h2 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h2><p>​    今天所讲的都是一些基础入门的知识点，核心是理解和掌握正向和反向连接。</p><p>​    在此还要推荐一个非常不错的安全学习网站：</p><p>​    棱角：<a href="https://forum.ywhack.com/bountytips.php">https://forum.ywhack.com/bountytips.php</a></p><p>​    </p><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专业名词 </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写在开头</title>
      <link href="/2021/11/05/Myfirst-Blog/"/>
      <url>/2021/11/05/Myfirst-Blog/</url>
      
        <content type="html"><![CDATA[<p>​    这是我的第一篇博客！</p><p>​    本人是今年六月份刚刚毕业的，就读于安徽一所普通的双非一本大学，专业是信息安全，说起我的专业，我实在是回忆不起当时自己是怎么报的这个专业了，所以就糊里糊涂的挥霍完了我大学四年美好的时光了。理所应当，毕业面临的是找工作还是考研的两大选择难题，家里人都希望我考研，我也尝试过了，但后来因为我个人和家庭的一些原因放弃了，就只能找工作一条路走到黑了。毕业前几个月开始疯狂恶补专业知识，看到有的同学们都拿到了理想的offer我实在是羡慕呀，同时也留下了悔恨的泪水，没办法，只能退而求其次，先去一些小的公司实习实习攒点经验。最初是去了一家做等保的公司实习，做了大概一个多月，和我未来的职业规划实在差别太大了，我就果断跑路了。后来经同学的介绍去了绿盟实习，我真的很感谢在绿盟实习的这将近3个月时间，虽说没有什么显著的提升，但是让我看见和明确了自己未来的职业道路，算是正式的踏入网安这个行业吧！</p><p>​    咳！咳！废话了这么多，还是切回正题吧！关于搭建这个博客的原因，起初是看到好多大佬们都有自己的博客来记录学习和生活，感觉非常的nice，后面考虑到种种原因，就想自己也搭一个来玩玩，最起码记录一下自己的学习历程也算是一件非常有意义的事了！但老实说，我真的不是一个喜欢写日记的人，所以这个博客的搭建我前前后后大概花了有半个月的时间。因为我个人专业的原因，所以博客的内容大多都会和网络安全有关，正好前几天报了小迪老师的课，我准备以小迪老师课程的步伐来记录我的学习历程。</p><p>​    不管怎么说，做任何一件事只要是开始了，就永远要比停在原地有收获，我希望自己能坚持下去！</p>]]></content>
      
      
      <categories>
          
          <category> 个人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> first </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
